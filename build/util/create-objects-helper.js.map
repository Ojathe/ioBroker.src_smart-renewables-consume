{
  "version": 3,
  "sources": ["../../src/util/create-objects-helper.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\n\nexport type AccessProps = { read: boolean; write: boolean };\nexport type CreateStateProps = { desc?: string; unit?: string; custom?: Record<string, any> };\n\nexport async function createObject<T extends ioBroker.StateValue>(\n\tcontext: AdapterInstance,\n\tname: string,\n\ttypeName: ioBroker.CommonType,\n\tdefaultValue: T,\n\tprops?: CreateStateProps,\n\taccessProps: AccessProps = { read: true, write: true },\n): Promise<void> {\n\t/*\tFor every state in the system there has to be also an object of type state\n        Here a simple template for a boolean variable named \"testVariable\"\n        Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n        */\n\tawait context.setObjectNotExistsAsync(name, {\n\t\ttype: 'state',\n\t\tcommon: {\n\t\t\tname,\n\t\t\ttype: typeName,\n\t\t\trole: 'indicator',\n\t\t\tdesc: props?.desc,\n\t\t\tunit: props?.unit,\n\t\t\tread: accessProps.read,\n\t\t\twrite: accessProps.write,\n\t\t\tcustom: props?.custom,\n\t\t},\n\t\tnative: {},\n\t});\n\n\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\tcontext.subscribeStates(name);\n\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t// this.subscribeStates('lights.*');\n\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t// this.subscribeStates('*');\n\n\tawait context.setStateAsync(name, { val: defaultValue, ack: true });\n}\n\nexport async function createObjectString(\n\tadapter: AdapterInstance,\n\tname: string,\n\tdefaultValue = '',\n\tprops?: CreateStateProps,\n\taccessProps?: AccessProps,\n): Promise<void> {\n\tawait createObject<string>(adapter, name, 'string', defaultValue, props, accessProps);\n}\n\nexport async function createObjectBool(\n\tadapter: AdapterInstance,\n\tname: string,\n\tdefaultValue = false,\n\tprops?: CreateStateProps,\n\taccessProps?: AccessProps,\n): Promise<void> {\n\tawait createObject<boolean>(adapter, name, 'boolean', defaultValue, props, accessProps);\n}\n\nexport async function createObjectNum(\n\tadapter: AdapterInstance,\n\tname: string,\n\tdefaultValue = 0,\n\tprops?: CreateStateProps,\n\taccessProps?: AccessProps,\n): Promise<void> {\n\tawait createObject<number>(adapter, name, 'number', defaultValue, props, accessProps);\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,eAAsB,aACrB,SACA,MACA,UACA,cACA,OACA,cAA2B,EAAE,MAAM,MAAM,OAAO,KAAK,GACrC;AAKhB,QAAM,QAAQ,wBAAwB,MAAM;AAAA,IAC3C,MAAM;AAAA,IACN,QAAQ;AAAA,MACP;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM,+BAAO;AAAA,MACb,MAAM,+BAAO;AAAA,MACb,MAAM,YAAY;AAAA,MAClB,OAAO,YAAY;AAAA,MACnB,QAAQ,+BAAO;AAAA,IAChB;AAAA,IACA,QAAQ,CAAC;AAAA,EACV,CAAC;AAGD,UAAQ,gBAAgB,IAAI;AAM5B,QAAM,QAAQ,cAAc,MAAM,EAAE,KAAK,cAAc,KAAK,KAAK,CAAC;AACnE;AAEA,eAAsB,mBACrB,SACA,MACA,eAAe,IACf,OACA,aACgB;AAChB,QAAM,aAAqB,SAAS,MAAM,UAAU,cAAc,OAAO,WAAW;AACrF;AAEA,eAAsB,iBACrB,SACA,MACA,eAAe,OACf,OACA,aACgB;AAChB,QAAM,aAAsB,SAAS,MAAM,WAAW,cAAc,OAAO,WAAW;AACvF;AAEA,eAAsB,gBACrB,SACA,MACA,eAAe,GACf,OACA,aACgB;AAChB,QAAM,aAAqB,SAAS,MAAM,UAAU,cAAc,OAAO,WAAW;AACrF;",
  "names": []
}
