{
  "version": 3,
  "sources": ["../../src/services/analyzer-lack.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\nimport { AverageValueGroup } from '../values/average-value-group';\nimport { EXTERNAL_STATE_LANDINGZONE, INTERNAL_STATE_EEG } from '../handler/dp-handler';\n\nexport class AnalyzerLack {\n\t// TODO move to config\n\tpublic static readonly lackReportingThreshold = -0.5;\n\tpublic static readonly gridBuyingThreshold = -0.2;\n\n\tconstructor(private adapter: AdapterInstance, private avgValueHandler: AverageValueGroup) {\n\t}\n\n\tpublic async run(): Promise<void> {\n\t\t// TODO investigate on how to configure values\n\t\t// if (!this.adapter.config.optionEnergyManagementActive) {\n\t\t// \tconsole.log('Energy Management is not active.');\n\t\t// \treturn;\n\t\t// }\n\n\t\tlet powerLack = false;\n\n\t\t// Energy, missing (<0) oder additionally (>0) related to the household load\n\t\tconst powerDifAvg5 = await this.avgValueHandler.powerDif.avg5.getValue();\n\t\tconst gridPowerAvg5 = await this.avgValueHandler.powerGrid.avg5.getValue();\n\t\tconst batSoc = ((await this.adapter.getStateAsync(EXTERNAL_STATE_LANDINGZONE.BAT_SOC))?.val as number) ?? 0;\n\n\t\t// TODO PV Connection\n\t\t// Mangel, wenn\n\t\t//\t-> mindestens 2kW vom Stromnetz/AKku bezogen werden,\n\t\t//\t-> der Akku weniger als 95% hat\n\t\t//\t-> kaum bis keine Solarstrahlung existiert\n\t\tif (powerDifAvg5 < -1.9 && batSoc < 95) {\n\t\t\tpowerLack = true;\n\t\t}\n\n\t\t// Mangel, wenn\n\t\t//\t-> mindestens 1kW vom Stromnetz / Akku bezogen werden\n\t\t//\t-> der Akkustand unterhalb von 60% ist\n\t\tif (powerDifAvg5 < -0.9 && batSoc < 60) {\n\t\t\tpowerLack = true;\n\t\t}\n\n\t\t// Mangel, wenn\n\t\t//    -> mindestens 0,5kW vom Stromnetz / Akku bezogen werden\n\t\t//    -> der Akku unterhalb 30% ist\n\t\tif (powerDifAvg5 < -0.5 && batSoc < 30) {\n\t\t\tpowerLack = true;\n\t\t}\n\n\t\t// Mangel, wenn\n\t\t//    -> \u00FCberhaupt vom Stromnetz / Akku bezogen werden\n\t\t//    -> der Akku unterhalb 10% ist\n\t\tif (powerDifAvg5 < 0 && batSoc < 10) {\n\t\t\tpowerLack = true;\n\t\t}\n\n\t\t// Mangel forcen, wenn vom Stromnetz genommen wird\n\t\tif (gridPowerAvg5 <= AnalyzerLack.gridBuyingThreshold) {\n\t\t\tpowerLack = true;\n\t\t}\n\n\t\tconst msg = `LackAnalysis # Lack GridPowerAvg5=${gridPowerAvg5} => PowerLack:${powerLack} SOC=${batSoc}`;\n\t\tconst reportedLack: boolean = ((await this.adapter.getStateAsync(INTERNAL_STATE_EEG.LOSS))?.val as boolean) ?? false;\n\n\t\tif (powerLack && !reportedLack) {\n\t\t\tconsole.log(msg + ' || STATE CHANGED');\n\t\t} else {\n\t\t\tconsole.debug(msg);\n\t\t}\n\n\t\t// Update the state\n\t\tawait this.adapter.setStateAsync(INTERNAL_STATE_EEG.LOSS, powerLack, true);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,wBAA+D;AAExD,MAAM,aAAa;AAAA,EAKzB,YAAoB,SAAkC,iBAAoC;AAAtE;AAAkC;AAAA,EACtD;AAAA;AAAA,EAJA,OAAuB,yBAAyB;AAAA,EAChD,OAAuB,sBAAsB;AAAA,EAK7C,MAAa,MAAqB;AAZnC;AAmBE,QAAI,YAAY;AAGhB,UAAM,eAAe,MAAM,KAAK,gBAAgB,SAAS,KAAK,SAAS;AACvE,UAAM,gBAAgB,MAAM,KAAK,gBAAgB,UAAU,KAAK,SAAS;AACzE,UAAM,UAAW,iBAAM,KAAK,QAAQ,cAAc,6CAA2B,OAAO,MAAnE,mBAAuE,QAAvE,YAAyF;AAO1G,QAAI,eAAe,QAAQ,SAAS,IAAI;AACvC,kBAAY;AAAA,IACb;AAKA,QAAI,eAAe,QAAQ,SAAS,IAAI;AACvC,kBAAY;AAAA,IACb;AAKA,QAAI,eAAe,QAAQ,SAAS,IAAI;AACvC,kBAAY;AAAA,IACb;AAKA,QAAI,eAAe,KAAK,SAAS,IAAI;AACpC,kBAAY;AAAA,IACb;AAGA,QAAI,iBAAiB,aAAa,qBAAqB;AACtD,kBAAY;AAAA,IACb;AAEA,UAAM,MAAM,qCAAqC,aAAa,iBAAiB,SAAS,QAAQ,MAAM;AACtG,UAAM,gBAA0B,iBAAM,KAAK,QAAQ,cAAc,qCAAmB,IAAI,MAAxD,mBAA4D,QAA5D,YAA+E;AAE/G,QAAI,aAAa,CAAC,cAAc;AAC/B,cAAQ,IAAI,MAAM,mBAAmB;AAAA,IACtC,OAAO;AACN,cAAQ,MAAM,GAAG;AAAA,IAClB;AAGA,UAAM,KAAK,QAAQ,cAAc,qCAAmB,MAAM,WAAW,IAAI;AAAA,EAC1E;AACD;",
  "names": []
}
