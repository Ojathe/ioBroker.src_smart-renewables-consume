{
  "version": 3,
  "sources": ["../../src/services/analyzer-bonus.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\nimport { AverageValueGroup } from '../values/average-value-group';\nimport { EXTERNAL_STATE_LANDINGZONE, INTERNAL_STATE_EEG } from '../handler/dp-handler';\nimport { getStateAsBoolean, getStateAsNumber } from '../util/state-util';\n\nexport interface AnalyzerBonusProps {\n\n}\n\nexport class AnalyzerBonus {\n\t// TODO move to config\n\tpublic static readonly sellingThreshold: number = 0.2;\n\tpublic static readonly bonusReportThreshold: number = 0.1;\n\tpublic static readonly batChargeMinimum: number = 10;\n\n\tconstructor(private adapter: AdapterInstance, private avgValueHandler: AverageValueGroup) {\n\t}\n\n\tpublic async run(): Promise<void> {\n\t\t// TODO investigate on how to configure values\n\t\t// TODO PV Connection\n\n\t\tlet powerBonus = false;\n\n\t\t// Energy, missing (<0) oder additionally (>0) related to the household load\n\t\tconst powerDif = await this.avgValueHandler.powerDif.current.getValue();\n\t\tconst powerDifAvg = await this.avgValueHandler.powerDif.avg.getValue();\n\t\tconst gridPowerAvg = await this.avgValueHandler.powerGrid.avg.getValue();\n\n\t\tconst batSoc = (await getStateAsNumber(this.adapter, EXTERNAL_STATE_LANDINGZONE.BAT_SOC)) ?? 0;\n\n\t\t// bonus when positive power balance\n\t\tif (gridPowerAvg > AnalyzerBonus.sellingThreshold) {\n\t\t\tpowerBonus = true;\n\t\t}\n\n\t\t// bonus when grid selling\n\t\tif (powerDifAvg > AnalyzerBonus.bonusReportThreshold) {\n\t\t\tpowerBonus = true;\n\t\t}\n\n\t\t// no bonus, when battery is lower or the current power balance is negative\n\t\tif (batSoc <= AnalyzerBonus.batChargeMinimum || powerDif < 0) {\n\t\t\tpowerBonus = false;\n\t\t}\n\n\t\tconst msg = `BonusAnalysis # Bonus PowerDif=${powerDif} PowerDifAvg=${powerDifAvg} => powerBonus:${powerBonus} SOC=${batSoc}`;\n\n\t\tconst reportedBonus = (await getStateAsBoolean(this.adapter, INTERNAL_STATE_EEG.BONUS)) ?? false;\n\t\tif (powerBonus && !reportedBonus) {\n\t\t\tconsole.log(msg + ' || STATE CHANGED');\n\t\t} else {\n\t\t\tconsole.debug(msg);\n\t\t}\n\n\t\t// update battery stand of charge\n\t\tif (powerBonus) {\n\t\t\tawait this.adapter.setStateAsync(INTERNAL_STATE_EEG.SOC_LAST_BONUS, batSoc, true);\n\t\t}\n\n\t\t// Update the state\n\t\tawait this.adapter.setStateAsync(INTERNAL_STATE_EEG.BONUS, powerBonus, true);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,wBAA+D;AAC/D,wBAAoD;AAM7C,MAAM,cAAc;AAAA,EAM1B,YAAoB,SAAkC,iBAAoC;AAAtE;AAAkC;AAAA,EACtD;AAAA;AAAA,EALA,OAAuB,mBAA2B;AAAA,EAClD,OAAuB,uBAA+B;AAAA,EACtD,OAAuB,mBAA2B;AAAA,EAKlD,MAAa,MAAqB;AAlBnC;AAsBE,QAAI,aAAa;AAGjB,UAAM,WAAW,MAAM,KAAK,gBAAgB,SAAS,QAAQ,SAAS;AACtE,UAAM,cAAc,MAAM,KAAK,gBAAgB,SAAS,IAAI,SAAS;AACrE,UAAM,eAAe,MAAM,KAAK,gBAAgB,UAAU,IAAI,SAAS;AAEvE,UAAM,UAAU,eAAM,oCAAiB,KAAK,SAAS,6CAA2B,OAAO,MAAvE,YAA6E;AAG7F,QAAI,eAAe,cAAc,kBAAkB;AAClD,mBAAa;AAAA,IACd;AAGA,QAAI,cAAc,cAAc,sBAAsB;AACrD,mBAAa;AAAA,IACd;AAGA,QAAI,UAAU,cAAc,oBAAoB,WAAW,GAAG;AAC7D,mBAAa;AAAA,IACd;AAEA,UAAM,MAAM,kCAAkC,QAAQ,gBAAgB,WAAW,kBAAkB,UAAU,QAAQ,MAAM;AAE3H,UAAM,iBAAiB,eAAM,qCAAkB,KAAK,SAAS,qCAAmB,KAAK,MAA9D,YAAoE;AAC3F,QAAI,cAAc,CAAC,eAAe;AACjC,cAAQ,IAAI,MAAM,mBAAmB;AAAA,IACtC,OAAO;AACN,cAAQ,MAAM,GAAG;AAAA,IAClB;AAGA,QAAI,YAAY;AACf,YAAM,KAAK,QAAQ,cAAc,qCAAmB,gBAAgB,QAAQ,IAAI;AAAA,IACjF;AAGA,UAAM,KAAK,QAAQ,cAAc,qCAAmB,OAAO,YAAY,IAAI;AAAA,EAC5E;AACD;",
  "names": []
}
