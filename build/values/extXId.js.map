{
  "version": 3,
  "sources": ["../../src/values/extXId.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\n\nexport class ExtXId<T extends ioBroker.StateValue> {\n\tprivate isManaged: boolean = false;\n\n\tprotected constructor(\n\t\tpublic readonly xid: string,\n\t\tprivate readonly adapter: AdapterInstance,\n\t) {\n\t\tif (adapter === undefined) {\n\t\t\tthrow new Error('adapter has to be defined!');\n\t\t}\n\t}\n\n\tprotected static async asManagedBase<T extends ioBroker.StateValue>(\n\t\tadapter: AdapterInstance,\n\t\textXid: string,\n\t\ttypeName: ioBroker.CommonType,\n\t): Promise<ExtXId<T>> {\n\t\tconst instance = await ExtXId.asManagedBase<T>(adapter, extXid, typeName);\n\t\tinstance.isManaged = true;\n\t\treturn instance;\n\t}\n\n\tprotected static async asReadableBase<T extends ioBroker.StateValue>(\n\t\tadapter: AdapterInstance,\n\t\textXid: string,\n\t\ttypeName: ioBroker.CommonType,\n\t): Promise<ExtXId<T>> {\n\t\tconst state = await adapter.getForeignStateAsync(extXid);\n\t\tconst object = await adapter.getForeignObjectAsync(extXid);\n\n\t\tif (!state || !object) {\n\t\t\tthrow new Error(`Non existing foreign State '${extXid}'`);\n\t\t}\n\n\t\tif (object.common.type !== typeName) {\n\t\t\tthrow new Error(`Mismatching type for foreign state  '${extXid}' (expected: ${typeName}, given: ${object.common.type})`);\n\t\t}\n\t\treturn new ExtXId(extXid, adapter);\n\t}\n\n\tpublic getValue = async (): Promise<T> => {\n\t\tif (this.adapter === undefined) {\n\t\t\tthrow new Error('adapter is not defined');\n\t\t}\n\t\tconst state = await this.adapter.getForeignStateAsync(this.xid);\n\n\t\tif (state === undefined || state == null) {\n\t\t\tthrow new Error('foreign state is not defined:' + this.xid);\n\t\t}\n\n\t\tif (state.val === undefined) {\n\t\t\tthrow new Error('No value present in foreign state: ' + this.xid);\n\t\t}\n\n\t\treturn state.val as T;\n\t};\n\n\tpublic async setValue(value: T): ioBroker.SetStatePromise {\n\t\tif (!this.isManaged) {\n\t\t\tthrow new Error('Non managed xid\\'s are not allowed to write values: ' + this.xid);\n\t\t}\n\n\t\treturn this.adapter.setStateAsync(this.xid, value, true);\n\t}\n\n}\n\nexport class ExtXidNumber extends ExtXId<number> {\n\tstatic async asReadable(adapter: AdapterInstance, xid: string): Promise<ExtXidNumber> {\n\t\treturn ExtXId.asReadableBase<number>(adapter, xid, 'number');\n\t}\n\n\tstatic async asManaged(adapter: AdapterInstance, xid: string): Promise<ExtXidNumber> {\n\t\treturn ExtXId.asManagedBase<number>(adapter, xid, 'number');\n\t}\n}\n\nexport class ExtXidBool extends ExtXId<boolean> {\n\tstatic async asReadable(adapter: AdapterInstance, xid: string): Promise<ExtXidBool> {\n\t\treturn ExtXId.asReadableBase<boolean>(adapter, xid, 'boolean');\n\t}\n\n\tstatic async asManaged(adapter: AdapterInstance, xid: string): Promise<ExtXidBool> {\n\t\treturn ExtXId.asManagedBase<boolean>(adapter, xid, 'boolean');\n\t}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,MAAM,OAAsC;AAAA,EAGxC,YACO,KACC,SAChB;AAFe;AACC;AAEjB,QAAI,YAAY,QAAW;AAC1B,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC7C;AAAA,EACD;AAAA,EATQ,YAAqB;AAAA,EAW7B,aAAuB,cACtB,SACA,QACA,UACqB;AACrB,UAAM,WAAW,MAAM,OAAO,cAAiB,SAAS,QAAQ,QAAQ;AACxE,aAAS,YAAY;AACrB,WAAO;AAAA,EACR;AAAA,EAEA,aAAuB,eACtB,SACA,QACA,UACqB;AACrB,UAAM,QAAQ,MAAM,QAAQ,qBAAqB,MAAM;AACvD,UAAM,SAAS,MAAM,QAAQ,sBAAsB,MAAM;AAEzD,QAAI,CAAC,SAAS,CAAC,QAAQ;AACtB,YAAM,IAAI,MAAM,+BAA+B,MAAM,GAAG;AAAA,IACzD;AAEA,QAAI,OAAO,OAAO,SAAS,UAAU;AACpC,YAAM,IAAI,MAAM,wCAAwC,MAAM,gBAAgB,QAAQ,YAAY,OAAO,OAAO,IAAI,GAAG;AAAA,IACxH;AACA,WAAO,IAAI,OAAO,QAAQ,OAAO;AAAA,EAClC;AAAA,EAEO,WAAW,YAAwB;AACzC,QAAI,KAAK,YAAY,QAAW;AAC/B,YAAM,IAAI,MAAM,wBAAwB;AAAA,IACzC;AACA,UAAM,QAAQ,MAAM,KAAK,QAAQ,qBAAqB,KAAK,GAAG;AAE9D,QAAI,UAAU,UAAa,SAAS,MAAM;AACzC,YAAM,IAAI,MAAM,kCAAkC,KAAK,GAAG;AAAA,IAC3D;AAEA,QAAI,MAAM,QAAQ,QAAW;AAC5B,YAAM,IAAI,MAAM,wCAAwC,KAAK,GAAG;AAAA,IACjE;AAEA,WAAO,MAAM;AAAA,EACd;AAAA,EAEA,MAAa,SAAS,OAAoC;AACzD,QAAI,CAAC,KAAK,WAAW;AACpB,YAAM,IAAI,MAAM,wDAAyD,KAAK,GAAG;AAAA,IAClF;AAEA,WAAO,KAAK,QAAQ,cAAc,KAAK,KAAK,OAAO,IAAI;AAAA,EACxD;AAED;AAEO,MAAM,qBAAqB,OAAe;AAAA,EAChD,aAAa,WAAW,SAA0B,KAAoC;AACrF,WAAO,OAAO,eAAuB,SAAS,KAAK,QAAQ;AAAA,EAC5D;AAAA,EAEA,aAAa,UAAU,SAA0B,KAAoC;AACpF,WAAO,OAAO,cAAsB,SAAS,KAAK,QAAQ;AAAA,EAC3D;AACD;AAEO,MAAM,mBAAmB,OAAgB;AAAA,EAC/C,aAAa,WAAW,SAA0B,KAAkC;AACnF,WAAO,OAAO,eAAwB,SAAS,KAAK,SAAS;AAAA,EAC9D;AAAA,EAEA,aAAa,UAAU,SAA0B,KAAkC;AAClF,WAAO,OAAO,cAAuB,SAAS,KAAK,SAAS;AAAA,EAC7D;AACD;",
  "names": []
}
