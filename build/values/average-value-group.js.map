{
  "version": 3,
  "sources": ["../../src/values/average-value-group.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\nimport { AverageValue } from './average-value';\nimport { getStateAsBoolean, getStateAsNumber } from '../util/state-util';\nimport { EXTERNAL_STATE_LANDINGZONE } from '../handler/dp-handler';\nimport { round } from '../util/math';\n\nexport class AverageValueGroup {\n\tprivate constructor(private adapter: AdapterInstance) {\n\t}\n\n\tprivate _solar: AverageValue | undefined;\n\n\tpublic get solar(): AverageValue {\n\t\treturn this._solar!;\n\t}\n\n\tprivate _powerPv: AverageValue | undefined;\n\n\tpublic get powerPv(): AverageValue {\n\t\treturn this._powerPv!;\n\t}\n\n\tprivate _powerDif: AverageValue | undefined;\n\n\tpublic get powerDif(): AverageValue {\n\t\treturn this._powerDif!;\n\t}\n\n\tprivate _powerGrid: AverageValue | undefined;\n\n\tpublic get powerGrid(): AverageValue {\n\t\treturn this._powerGrid!;\n\t}\n\n\tprivate _batLoad: AverageValue | undefined;\n\n\tpublic get batLoad(): AverageValue {\n\t\treturn this._batLoad!;\n\t}\n\n\tstatic async build(adapter: AdapterInstance): Promise<AverageValueGroup> {\n\t\tconst val = new AverageValueGroup(adapter);\n\n\t\tval._solar = await AverageValue.build(adapter, 'solar-radiation', {\n\t\t\tdesc: 'Average solar radiation',\n\t\t\txidSource: EXTERNAL_STATE_LANDINGZONE.SOLAR_RADIATION,\n\t\t\tunit: 'wm\u00B2',\n\t\t});\n\n\t\tval._powerPv = await AverageValue.build(adapter, 'power-pv', {\n\t\t\tdesc: 'PV generation',\n\t\t\txidSource: EXTERNAL_STATE_LANDINGZONE.PV_GENERATION,\n\t\t\tunit: 'kW',\n\t\t});\n\n\t\tval._batLoad = await AverageValue.build(adapter, 'bat-load', {\n\t\t\tdesc: 'The Battery load (-) consuming / (+) charging',\n\t\t\txidSource: EXTERNAL_STATE_LANDINGZONE.BAT_LOAD,\n\t\t\tunit: 'kW',\n\t\t});\n\n\t\tval._powerDif = await AverageValue.build(adapter, 'power-dif', {\n\t\t\tdesc: 'difference of energy over generation (+) and loss consumption(-)',\n\t\t\tasync mutation(_val: number) {\n\t\t\t\tconst load = await getStateAsNumber(adapter, EXTERNAL_STATE_LANDINGZONE.TOTAL_LOAD);\n\t\t\t\tconst pvPower = await getStateAsNumber(adapter, EXTERNAL_STATE_LANDINGZONE.PV_GENERATION);\n\n\t\t\t\tif (!load || !pvPower) {\n\t\t\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t\t\t}\n\n\t\t\t\tconsole.debug(\n\t\t\t\t\t`Calculating PowerDif Load:${load} kWh, PV-Gen: ${pvPower} kWh => Dif of ${pvPower - load}`,\n\t\t\t\t);\n\n\t\t\t\treturn round(pvPower - load);\n\t\t\t},\n\t\t});\n\n\t\tval._powerGrid = await AverageValue.build(adapter, 'power-grid', {\n\t\t\tdesc: 'amount of generation(+) or buying(-) of energy',\n\t\t\txidSource: EXTERNAL_STATE_LANDINGZONE.GRID_LOAD,\n\t\t\tasync mutation(val: number) {\n\t\t\t\tconst isGridBuying = (await getStateAsBoolean(adapter, EXTERNAL_STATE_LANDINGZONE.IS_GRID_BUYING)) ?? true;\n\t\t\t\treturn round(val * (isGridBuying ? -1 : 1));\n\t\t\t},\n\t\t});\n\n\t\t// TODO BatteryPower (lg-ess-home.0.user.essinfo.common.BATT.dc_power)\n\n\t\treturn val;\n\t}\n\n\tpublic async calculate(): Promise<void> {\n\t\tawait this.powerDif.calculate();\n\t\tawait this.powerGrid.calculate();\n\t\tawait this.powerPv.calculate();\n\t\tawait this.solar.calculate();\n\t}\n\n}\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,2BAA6B;AAC7B,wBAAoD;AACpD,wBAA2C;AAC3C,kBAAsB;AAEf,MAAM,kBAAkB;AAAA,EACtB,YAAoB,SAA0B;AAA1B;AAAA,EAC5B;AAAA,EAEQ;AAAA,EAER,IAAW,QAAsB;AAChC,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAW,UAAwB;AAClC,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAW,WAAyB;AACnC,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAW,YAA0B;AACpC,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAW,UAAwB;AAClC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,aAAa,MAAM,SAAsD;AACxE,UAAM,MAAM,IAAI,kBAAkB,OAAO;AAEzC,QAAI,SAAS,MAAM,kCAAa,MAAM,SAAS,mBAAmB;AAAA,MACjE,MAAM;AAAA,MACN,WAAW,6CAA2B;AAAA,MACtC,MAAM;AAAA,IACP,CAAC;AAED,QAAI,WAAW,MAAM,kCAAa,MAAM,SAAS,YAAY;AAAA,MAC5D,MAAM;AAAA,MACN,WAAW,6CAA2B;AAAA,MACtC,MAAM;AAAA,IACP,CAAC;AAED,QAAI,WAAW,MAAM,kCAAa,MAAM,SAAS,YAAY;AAAA,MAC5D,MAAM;AAAA,MACN,WAAW,6CAA2B;AAAA,MACtC,MAAM;AAAA,IACP,CAAC;AAED,QAAI,YAAY,MAAM,kCAAa,MAAM,SAAS,aAAa;AAAA,MAC9D,MAAM;AAAA,MACN,MAAM,SAAS,MAAc;AAC5B,cAAM,OAAO,UAAM,oCAAiB,SAAS,6CAA2B,UAAU;AAClF,cAAM,UAAU,UAAM,oCAAiB,SAAS,6CAA2B,aAAa;AAExF,YAAI,CAAC,QAAQ,CAAC,SAAS;AACtB,iBAAO,OAAO;AAAA,QACf;AAEA,gBAAQ;AAAA,UACP,6BAA6B,IAAI,iBAAiB,OAAO,kBAAkB,UAAU,IAAI;AAAA,QAC1F;AAEA,mBAAO,mBAAM,UAAU,IAAI;AAAA,MAC5B;AAAA,IACD,CAAC;AAED,QAAI,aAAa,MAAM,kCAAa,MAAM,SAAS,cAAc;AAAA,MAChE,MAAM;AAAA,MACN,WAAW,6CAA2B;AAAA,MACtC,MAAM,SAASA,MAAa;AAlF/B;AAmFI,cAAM,gBAAgB,eAAM,qCAAkB,SAAS,6CAA2B,cAAc,MAA1E,YAAgF;AACtG,mBAAO,mBAAMA,QAAO,eAAe,KAAK,EAAE;AAAA,MAC3C;AAAA,IACD,CAAC;AAID,WAAO;AAAA,EACR;AAAA,EAEA,MAAa,YAA2B;AACvC,UAAM,KAAK,SAAS,UAAU;AAC9B,UAAM,KAAK,UAAU,UAAU;AAC/B,UAAM,KAAK,QAAQ,UAAU;AAC7B,UAAM,KAAK,MAAM,UAAU;AAAA,EAC5B;AAED;",
  "names": ["val"]
}
