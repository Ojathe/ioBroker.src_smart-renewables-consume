{
  "version": 3,
  "sources": ["../../src/values/average-value.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\nimport { XidNumber } from './xid';\nimport { calculateAverageValue } from '../util/math';\n\n// TODO instance number and other values configurable\nconst customInflux = {\n\t'influxdb.0': {\n\t\tenabled: true,\n\t\tstorageType: '',\n\t\taliasId: '',\n\t\tdebounceTime: 0,\n\t\tblockTime: 0,\n\t\tchangesOnly: true,\n\t\tchangesRelogInterval: 600,\n\t\tchangesMinDelta: 0.1,\n\t\tignoreBelowNumber: '',\n\t\tdisableSkippedValueLogging: false,\n\t\tenableDebugLogs: false,\n\t\tdebounce: '1000',\n\t},\n};\n\n// TODO instance number and other values configurable\nconst customHistory = {\n\t'history.0': {\n\t\tenabled: true,\n\t\taliasId: '',\n\t\tdebounceTime: 0,\n\t\tblockTime: 0,\n\t\tchangesOnly: true,\n\t\tchangesRelogInterval: 600,\n\t\tchangesMinDelta: 0.1,\n\t\tignoreBelowNumber: '',\n\t\tdisableSkippedValueLogging: false,\n\t\tretention: 604800,\n\t\tcustomRetentionDuration: 365,\n\t\tmaxLength: 960,\n\t\tenableDebugLogs: false,\n\t\tdebounce: 1000,\n\t},\n};\n\nexport class AverageValue {\n\tpublic readonly source?: XidNumber;\n\tpublic readonly propertyName: string;\n\tpublic readonly desc?: string;\n\tpublic readonly mutation?: (number: number) => Promise<number>;\n\n\tpublic readonly current: XidNumber;\n\tpublic readonly avg: XidNumber;\n\tpublic readonly avg5: XidNumber;\n\n\tprivate constructor(\n\t\tprivate adapter: AdapterInstance,\n\t\tpropertyName: string,\n\t\tiobrokerObjects: { current: XidNumber, avg: XidNumber, avg5: XidNumber },\n\t\tprops?: { source?: XidNumber; desc?: string; unit?: string; mutation?: (number: number) => Promise<number> },\n\t) {\n\t\tthis.source = props?.source;\n\t\tthis.propertyName = propertyName;\n\t\tthis.desc = props?.desc;\n\n\t\tthis.mutation = props?.mutation;\n\n\t\tif (!this.mutation && !this.source) {\n\t\t\tthrow new Error(`${propertyName}: Es d\u00FCrfen nicht xidSource UND Mutation undefniert sein!`);\n\t\t}\n\n\t\tthis.current = iobrokerObjects.current;\n\t\tthis.avg = iobrokerObjects.avg;\n\t\tthis.avg5 = iobrokerObjects.avg5;\n\t}\n\n\tstatic async build(\n\t\tadapter: AdapterInstance,\n\t\tpropertyName: string,\n\t\tprops?: { xidSource?: string; desc?: string; unit?: string; mutation?: (number: number) => Promise<number> },\n\t): Promise<AverageValue> {\n\n\t\tconst { desc, unit, mutation } = props ?? {};\n\t\tconst source = props?.xidSource ? await XidNumber.asReadable(adapter, props?.xidSource) : undefined;\n\n\t\tconst xid = `avg.${propertyName}.`;\n\t\tconst description = props?.desc ?? propertyName;\n\n\t\tconst iobrokerObjects = {\n\t\t\tcurrent: await XidNumber.asManaged(adapter, xid + 'current', 0, {\n\t\t\t\tdesc: description,\n\t\t\t\tunit: props?.unit,\n\t\t\t\tcustom: customHistory,\n\t\t\t}),\n\t\t\tavg: await XidNumber.asManaged(adapter, xid + 'last-10-min', 0, {\n\t\t\t\tdesc: `${description} der letzten 10 Minuten`,\n\t\t\t\tunit: props?.unit,\n\t\t\t\tcustom: customInflux,\n\t\t\t}),\n\n\t\t\tavg5: await XidNumber.asManaged(adapter, xid + 'last-5-min', 0, {\n\t\t\t\tdesc: `${description} der letzten 5 Minuten`,\n\t\t\t\tunit: props?.unit,\n\t\t\t}),\n\t\t};\n\n\t\treturn new AverageValue(adapter, propertyName, iobrokerObjects, { desc, unit, mutation, source });\n\t}\n\n\tpublic async calculate(): Promise<void> {\n\t\tlet sourceVal = 0;\n\n\t\tif (this.source) {\n\t\t\tsourceVal = (await this.source?.getValue()) ?? 0;\n\t\t}\n\n\t\tif (this.mutation) {\n\t\t\tsourceVal = await this.mutation(sourceVal);\n\t\t}\n\n\t\tconsole.debug(`Updating Current Value (${sourceVal}) with xid: ${this.current.xid}`);\n\t\tawait this.adapter.setStateAsync(this.current.xid, sourceVal, true);\n\n\t\ttry {\n\t\t\tconst end = Date.now();\n\t\t\tconst start10Min = end - 60 * 1000 * 10;\n\t\t\tconst start5Min = end - 60 * 1000 * 5;\n\n\t\t\tthis.adapter.sendTo('history.0', 'getHistory', {\n\t\t\t\tid: `${this.adapter.name}.${this.adapter.instance}.${this.current.xid}`,\n\t\t\t\toptions: {\n\t\t\t\t\tstart: start10Min,\n\t\t\t\t\tend: end,\n\t\t\t\t\taggregate: 'none',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst result = await this.adapter.sendToAsync('history.0', 'getHistory', {\n\t\t\t\tid: `${this.adapter.name}.${this.adapter.instance}.${this.current.xid}`,\n\t\t\t\toptions: {\n\t\t\t\t\tstart: start10Min,\n\t\t\t\t\tend: end,\n\t\t\t\t\taggregate: 'none',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst values = (result as unknown as any)?.result ?? [] as { val: number; ts: number }[];\n\n\t\t\tawait this.calculateAvgValue(values, this.avg.xid);\n\t\t\tawait this.calculateAvgValue(values, this.avg5.xid, start5Min);\n\t\t} catch (error) {\n\t\t\tconsole.error(`calculateAvgValue(${this.current.xid}) # ${error}`);\n\t\t}\n\t}\n\n\tprivate async calculateAvgValue(\n\t\tvalues: { val: number; ts: number }[],\n\t\txidTarget: string,\n\t\tstartInMs = 0,\n\t): Promise<void> {\n\t\tvalues = values.filter((item) => item.ts >= startInMs);\n\n\t\tconst { sum, count, avg } = calculateAverageValue(values);\n\t\tconsole.debug(`Updating Average Value ( ${avg} ) (sum: ${sum}, count: ${count}) with xid: ` + xidTarget);\n\t\tawait this.adapter.setStateAsync(xidTarget, { val: avg, ack: true });\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
