{
  "version": 3,
  "sources": ["../../src/lib/dp-handler.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\n\nexport const XID_INGOING_PV_GENERATION = 'ingoing.pv-generation';\nexport const XID_INGOING_TOTAL_LOAD = 'ingoing.total-load';\nexport const XID_INGOING_BAT_SOC = 'ingoing.bat-soc';\nexport const XID_INGOING_SOLAR_RADIATION = 'ingoing.solar-radiation';\nexport const XID_INGOING_IS_GRID_BUYING = 'ingoing.is-grid-buying';\nexport const XID_INGOING_GRID_LOAD = 'ingoing.grid-load';\nexport const XID_INGOING_BAT_LOAD = 'ingoing.bat-load';\n\nexport const XID_EEG_STATE_BONUS = 'eeg-state.bonus';\nexport const XID_EEG_STATE_LOSS = 'eeg-state.loss';\nexport const XID_EEG_STATE_SOC_LAST_BONUS = 'eeg-state.soc-last-bonus';\n\nexport const XID_EEG_STATE_OPERATION = 'eeg-state.operation';\n\nexport type AccessProps = { read: boolean; write: boolean };\nexport type CreateStateProps = { desc?: string; unit?: string; custom?: Record<string, any> };\n\nasync function createObject<T extends ioBroker.StateValue>(\n\tcontext: AdapterInstance,\n\tname: string,\n\ttypeName: ioBroker.CommonType,\n\tdefaultValue: T,\n\tprops?: CreateStateProps,\n\taccessProps: AccessProps = { read: true, write: true },\n): Promise<void> {\n\t/*\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\tawait context.setObjectNotExistsAsync(name, {\n\t\ttype: 'state',\n\t\tcommon: {\n\t\t\tname,\n\t\t\ttype: typeName,\n\t\t\trole: 'indicator',\n\t\t\tdesc: props?.desc,\n\t\t\tunit: props?.unit,\n\t\t\tread: accessProps.read,\n\t\t\twrite: accessProps.write,\n\t\t\tcustom: props?.custom,\n\t\t},\n\t\tnative: {},\n\t});\n\n\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\tcontext.subscribeStates(name);\n\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t// this.subscribeStates('lights.*');\n\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t// this.subscribeStates('*');\n\n\tawait context.setStateAsync(name, { val: defaultValue, ack: true });\n}\n\nexport async function createObjectString(\n\tadapter: AdapterInstance,\n\tname: string,\n\tdefaultValue = '',\n\tprops?: CreateStateProps,\n\taccessProps?: AccessProps,\n): Promise<void> {\n\tawait createObject<string>(adapter, name, 'string', defaultValue, props, accessProps);\n}\n\nexport async function createObjectBool(\n\tadapter: AdapterInstance,\n\tname: string,\n\tdefaultValue = false,\n\tprops?: CreateStateProps,\n\taccessProps?: AccessProps,\n): Promise<void> {\n\tawait createObject<boolean>(adapter, name, 'string', defaultValue, props, accessProps);\n}\n\nexport async function createObjectNum(\n\tadapter: AdapterInstance,\n\tname: string,\n\tdefaultValue = 0,\n\tprops?: CreateStateProps,\n\taccessProps?: AccessProps,\n): Promise<void> {\n\tawait createObject<number>(adapter, name, 'number', defaultValue, props, accessProps);\n}\n\nexport const createObjects = async (adapter: AdapterInstance): Promise<void> => {\n\tawait createObjectNum(adapter, XID_INGOING_PV_GENERATION, 0, {\n\t\tdesc: 'The amount of power currently generated',\n\t\tunit: 'kWh',\n\t});\n\tawait createObjectNum(adapter, XID_INGOING_TOTAL_LOAD, 0, {\n\t\tdesc: 'The overall amount of currently consumend power',\n\t\tunit: 'kWh',\n\t});\n\tawait createObjectNum(adapter, XID_INGOING_BAT_SOC, 0, {\n\t\tdesc: 'The battery stand of charge',\n\t\tunit: '%',\n\t});\n\n\tawait createObjectNum(adapter, XID_INGOING_SOLAR_RADIATION, 0, {\n\t\tdesc: 'The Solar Radiation',\n\t\tunit: 'w\\\\m\u00B2',\n\t});\n\tawait createObjectNum(adapter, XID_INGOING_GRID_LOAD, 0, {\n\t\tdesc: 'The grids load',\n\t\tunit: 'kWh',\n\t});\n\tawait createObjectNum(adapter, XID_INGOING_BAT_LOAD, 0, {\n\t\tdesc: 'The battery load',\n\t\tunit: 'kWh',\n\t});\n\n\tawait createObjectBool(adapter, XID_INGOING_IS_GRID_BUYING, false, {\n\t\tdesc: 'True, if the System is buying energy from grid (external)',\n\t});\n\t// TODO Battery Power lg-ess-home.0.user.essinfo.common.BATT.dc_power\n\n\tawait createObjectBool(adapter, XID_EEG_STATE_BONUS, false, {\n\t\tdesc: 'True, if there is more Power then used',\n\t});\n\tawait createObjectBool(adapter, XID_EEG_STATE_LOSS, false, {\n\t\tdesc: 'True, if there is less Power then used',\n\t});\n\tawait createObjectBool(adapter, XID_EEG_STATE_OPERATION, false, {\n\t\tdesc: 'True, if the system should be managed',\n\t});\n\tawait createObjectNum(adapter, XID_EEG_STATE_SOC_LAST_BONUS, 0, {\n\t\tdesc: 'Batteries SoC when the last Bonus was detected',\n\t});\n};\n\nexport const addSubscriptions = (adapter: AdapterInstance, config: ioBroker.AdapterConfig): void => {\n\tadapter.subscribeForeignStates(config.optionSourcePvGeneration);\n\tadapter.subscribeForeignStates(config.optionSourceTotalLoad);\n\tadapter.subscribeForeignStates(config.optionSourceBatterySoc);\n\tadapter.subscribeForeignStates(config.optionSourceSolarRadiation);\n\tadapter.subscribeForeignStates(config.optionSourceIsGridBuying);\n\tadapter.subscribeForeignStates(config.optionSourceIsGridLoad);\n\tadapter.subscribeForeignStates(config.optionSourceBatteryLoad);\n};\n"],
  "mappings": "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",
  "names": []
}
