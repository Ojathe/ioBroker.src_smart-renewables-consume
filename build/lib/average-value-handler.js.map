{
  "version": 3,
  "sources": ["../../src/lib/average-value-handler.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\nimport { AverageValue } from './average-value';\nimport {\n\tXID_INGOING_BAT_LOAD,\n\tXID_INGOING_GRID_LOAD,\n\tXID_INGOING_IS_GRID_BUYING,\n\tXID_INGOING_PV_GENERATION,\n\tXID_INGOING_SOLAR_RADIATION,\n\tXID_INGOING_TOTAL_LOAD,\n} from './dp-handler';\nimport { getStateAsBoolean, getStateAsNumber } from './util/state-util';\n\nexport class AverageValueHandler {\n\tprivate constructor(private adapter: AdapterInstance) {}\n\n\tprivate _solar: AverageValue | undefined;\n\n\tpublic get solar(): AverageValue {\n\t\treturn this._solar!;\n\t}\n\n\tprivate _powerPv: AverageValue | undefined;\n\n\tpublic get powerPv(): AverageValue {\n\t\treturn this._powerPv!;\n\t}\n\n\tprivate _powerDif: AverageValue | undefined;\n\n\tpublic get powerDif(): AverageValue {\n\t\treturn this._powerDif!;\n\t}\n\n\tprivate _powerGrid: AverageValue | undefined;\n\n\tpublic get powerGrid(): AverageValue {\n\t\treturn this._powerGrid!;\n\t}\n\n\tprivate _batLoad: AverageValue | undefined;\n\n\tpublic get batLoad(): AverageValue {\n\t\treturn this._batLoad!;\n\t}\n\n\tstatic async build(adapter: AdapterInstance): Promise<AverageValueHandler> {\n\t\tconst val = new AverageValueHandler(adapter);\n\n\t\tval._solar = await AverageValue.build(adapter, 'solar-radiation', {\n\t\t\tdesc: 'Average solar radiation',\n\t\t\txidSource: XID_INGOING_SOLAR_RADIATION,\n\t\t\tunit: 'wm\u00B2',\n\t\t});\n\n\t\tval._powerPv = await AverageValue.build(adapter, 'power-pv', {\n\t\t\tdesc: 'PV generation',\n\t\t\txidSource: XID_INGOING_PV_GENERATION,\n\t\t\tunit: 'kW',\n\t\t});\n\n\t\tval._batLoad = await AverageValue.build(adapter, 'bat-load', {\n\t\t\tdesc: 'The Battery load (-) consuming / (+) charging',\n\t\t\txidSource: XID_INGOING_BAT_LOAD,\n\t\t\tunit: 'kW',\n\t\t});\n\n\t\tval._powerDif = await AverageValue.build(adapter, 'power-dif', {\n\t\t\tdesc: 'difference of energy over generation (+) and loss consumption(-)',\n\t\t\tasync mutation(_val: number) {\n\t\t\t\tconst load = await getStateAsNumber(adapter, XID_INGOING_TOTAL_LOAD);\n\t\t\t\tconst pvPower = await getStateAsNumber(adapter, XID_INGOING_PV_GENERATION);\n\n\t\t\t\tif (!load || !pvPower) {\n\t\t\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t\t\t}\n\n\t\t\t\tconsole.debug(\n\t\t\t\t\t`Calculating PowerDif Load:${load} kWh, PV-Gen: ${pvPower} kWh => Dif of ${pvPower - load}`,\n\t\t\t\t);\n\n\t\t\t\treturn round(pvPower - load);\n\t\t\t},\n\t\t});\n\n\t\tval._powerGrid = await AverageValue.build(adapter, 'power-grid', {\n\t\t\tdesc: 'amount of generation(+) or buying(-) of energy',\n\t\t\txidSource: XID_INGOING_GRID_LOAD,\n\t\t\tasync mutation(val: number) {\n\t\t\t\tconst isGridBuying = (await getStateAsBoolean(adapter, XID_INGOING_IS_GRID_BUYING)) ?? true;\n\t\t\t\treturn round(val * (isGridBuying ? -1 : 1));\n\t\t\t},\n\t\t});\n\n\t\t// TODO BatteryPower (lg-ess-home.0.user.essinfo.common.BATT.dc_power)\n\n\t\treturn val;\n\t}\n\n\tpublic async calculate(): Promise<void> {\n\t\tawait this.calculateItem(this.powerDif);\n\t\tawait this.calculateItem(this.powerGrid);\n\t\tawait this.calculateItem(this.powerPv);\n\t\tawait this.calculateItem(this.solar);\n\t}\n\n\tprivate async calculateItem(item: AverageValue): Promise<void> {\n\t\tlet sourceVal = 0;\n\n\t\tif (item.xidSource) {\n\t\t\tsourceVal = (await getStateAsNumber(this.adapter, item.xidSource)) ?? 0;\n\t\t}\n\n\t\tif (item.mutation) {\n\t\t\tsourceVal = await item.mutation(sourceVal);\n\t\t}\n\n\t\tconsole.debug(`Updating Current Value (${sourceVal}) with xid: ${item.xidCurrent}`);\n\t\tawait this.adapter.setStateAsync(item.xidCurrent, sourceVal, true);\n\n\t\ttry {\n\t\t\tconst end = Date.now();\n\t\t\tconst start10Min = end - 60 * 1000 * 10;\n\t\t\tconst start5Min = end - 60 * 1000 * 5;\n\n\t\t\tthis.adapter.sendTo('history.0', 'getHistory', {\n\t\t\t\tid: `${this.adapter.name}.${this.adapter.instance}.${item.xidCurrent}`,\n\t\t\t\toptions: {\n\t\t\t\t\tstart: start10Min,\n\t\t\t\t\tend: end,\n\t\t\t\t\taggregate: 'none',\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst result = await this.adapter.sendToAsync('history.0', 'getHistory', {\n\t\t\t\tid: `${this.adapter.name}.${this.adapter.instance}.${item.xidCurrent}`,\n\t\t\t\toptions: {\n\t\t\t\t\tstart: start10Min,\n\t\t\t\t\tend: end,\n\t\t\t\t\taggregate: 'none',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst values = (result as unknown as any).result as { val: number; ts: number }[];\n\n\t\t\tawait this.calculateAvgValue(values, item.xidAvg);\n\t\t\tawait this.calculateAvgValue(values, item.xidAvg5, start5Min);\n\t\t} catch (error) {\n\t\t\tconsole.error(`calculateAvgValue(${item.getCurrent}) # ${error}`);\n\t\t}\n\t}\n\n\tprivate async calculateAvgValue(\n\t\tvalues: { val: number; ts: number }[],\n\t\txidTarget: string,\n\t\tstartInMs = 0,\n\t): Promise<void> {\n\t\tvalues = values.filter((item) => item.ts >= startInMs);\n\n\t\tconst { sum, count, avg } = calculateAverageValue(values);\n\t\tconsole.debug(`Updating Average Value ( ${avg} ) (sum: ${sum}, count: ${count}) with xid: ` + xidTarget);\n\t\tawait this.adapter.setStateAsync(xidTarget, { val: avg, ack: true });\n\t}\n}\n\nexport function calculateAverageValue(values: { val: number; ts: number }[]): {\n\tsum: number;\n\tcount: number;\n\tavg: number;\n} {\n\tconst sum = round(values.map((item) => item.val).reduce((prev, curr) => prev + curr, 0));\n\tconst count = values.length != 0 ? values.length : 0;\n\tconst avg = round(sum / (count > 0 ? count : 1));\n\n\treturn { sum, count, avg };\n}\n\nfunction round(val: number): number {\n\treturn Math.round(val * 100) / 100;\n}\n"],
  "mappings": "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",
  "names": ["val"]
}
