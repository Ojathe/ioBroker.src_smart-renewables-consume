{
  "version": 3,
  "sources": ["../../src/lib/analyzer-bonus.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\nimport { AverageValueHandler } from './average-value-handler';\nimport { XID_EEG_STATE_BONUS, XID_EEG_STATE_SOC_LAST_BONUS, XID_INGOING_BAT_SOC } from './dp-handler';\nimport { getStateAsBoolean, getStateAsNumber } from './util/state-util';\n\nexport class AnalyzerBonus {\n\t// TODO move to config\n\tpublic static readonly sellingThreshold: number = 0.2;\n\tpublic static readonly bonusReportThreshold: number = 0.1;\n\tpublic static readonly batChargeMinimum: number = 10;\n\n\tconstructor(private adapter: AdapterInstance, private avgValueHandler: AverageValueHandler) {}\n\n\tpublic async run(): Promise<void> {\n\t\t// TODO investigate on how to configure values\n\t\t// TODO PV Connection\n\n\t\tlet powerBonus = false;\n\n\t\t// Energy, missing (<0) oder additionally (>0) related to the household load\n\t\tconst powerDif = await this.avgValueHandler.powerDif.getCurrent();\n\t\tconst powerDifAvg = await this.avgValueHandler.powerDif.get10Min();\n\n\t\tconst gridPowerAvg = await this.avgValueHandler.powerGrid.get10Min();\n\n\t\tconst batSoc = (await getStateAsNumber(this.adapter, XID_INGOING_BAT_SOC)) ?? 0;\n\n\t\t// bonus when positive power balance\n\t\tif (gridPowerAvg > AnalyzerBonus.sellingThreshold) {\n\t\t\tpowerBonus = true;\n\t\t}\n\n\t\t// bonus when grid selling\n\t\tif (powerDifAvg > AnalyzerBonus.bonusReportThreshold) {\n\t\t\tpowerBonus = true;\n\t\t}\n\n\t\t// no bonus, when battery is lower or the current power balance is negative\n\t\tif (batSoc <= AnalyzerBonus.batChargeMinimum || powerDif < 0) {\n\t\t\tpowerBonus = false;\n\t\t}\n\n\t\tconst msg = `BonusAnalysis # Bonus PowerDif=${powerDif} PowerDifAvg=${powerDifAvg} => powerBonus:${powerBonus} SOC=${batSoc}`;\n\n\t\tconst reportedBonus = (await getStateAsBoolean(this.adapter, XID_EEG_STATE_BONUS)) ?? false;\n\t\tif (powerBonus && !reportedBonus) {\n\t\t\tconsole.log(msg + ' || STATE CHANGED');\n\t\t} else {\n\t\t\tconsole.debug(msg);\n\t\t}\n\n\t\t// update battery stand of charge\n\t\tif (powerBonus) {\n\t\t\tawait this.adapter.setStateAsync(XID_EEG_STATE_SOC_LAST_BONUS, batSoc);\n\t\t}\n\n\t\t// Update the state\n\t\tawait this.adapter.setStateAsync(XID_EEG_STATE_BONUS, powerBonus);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,wBAAuF;AACvF,wBAAoD;AAE7C,MAAM,cAAc;AAAA,EAM1B,YAAoB,SAAkC,iBAAsC;AAAxE;AAAkC;AAAA,EAAuC;AAAA;AAAA,EAJ7F,OAAuB,mBAA2B;AAAA,EAClD,OAAuB,uBAA+B;AAAA,EACtD,OAAuB,mBAA2B;AAAA,EAIlD,MAAa,MAAqB;AAbnC;AAiBE,QAAI,aAAa;AAGjB,UAAM,WAAW,MAAM,KAAK,gBAAgB,SAAS,WAAW;AAChE,UAAM,cAAc,MAAM,KAAK,gBAAgB,SAAS,SAAS;AAEjE,UAAM,eAAe,MAAM,KAAK,gBAAgB,UAAU,SAAS;AAEnE,UAAM,UAAU,eAAM,oCAAiB,KAAK,SAAS,qCAAmB,MAAxD,YAA8D;AAG9E,QAAI,eAAe,cAAc,kBAAkB;AAClD,mBAAa;AAAA,IACd;AAGA,QAAI,cAAc,cAAc,sBAAsB;AACrD,mBAAa;AAAA,IACd;AAGA,QAAI,UAAU,cAAc,oBAAoB,WAAW,GAAG;AAC7D,mBAAa;AAAA,IACd;AAEA,UAAM,MAAM,kCAAkC,QAAQ,gBAAgB,WAAW,kBAAkB,UAAU,QAAQ,MAAM;AAE3H,UAAM,iBAAiB,eAAM,qCAAkB,KAAK,SAAS,qCAAmB,MAAzD,YAA+D;AACtF,QAAI,cAAc,CAAC,eAAe;AACjC,cAAQ,IAAI,MAAM,mBAAmB;AAAA,IACtC,OAAO;AACN,cAAQ,MAAM,GAAG;AAAA,IAClB;AAGA,QAAI,YAAY;AACf,YAAM,KAAK,QAAQ,cAAc,gDAA8B,MAAM;AAAA,IACtE;AAGA,UAAM,KAAK,QAAQ,cAAc,uCAAqB,UAAU;AAAA,EACjE;AACD;",
  "names": []
}
