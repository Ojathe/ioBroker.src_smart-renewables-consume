{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.2\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\nimport { scheduleJob } from 'node-schedule';\nimport { AnalyzerLack } from './services/analyzer-lack';\nimport { AnalyzerBonus } from './services/analyzer-bonus';\nimport { PowerRepository } from './repositories/power-repository';\nimport { LandingZoneRepoImpl, LandingZoneRepository } from './repositories/landing-zone-repository';\nimport { EegRepository, EegRepositoryImpl } from './repositories/eeg-repository';\nimport { ExternalStateConnector } from './services/external-state-connector';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass SrcSmartRenewablesConsume extends utils.Adapter {\n\tprivate powerRepo: PowerRepository | undefined;\n\tprivate landingZoneRepo: LandingZoneRepository | undefined;\n\tprivate eegRepo: EegRepository | undefined;\n\n\tprivate analyzerBonus: AnalyzerBonus | undefined;\n\tprivate analyzerLack: AnalyzerLack | undefined;\n\tprivate externalStateConnector: ExternalStateConnector | undefined;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'src_smart-renewables-consume',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// TODO make sure that adapter will be restarted after config change\n\t\ttry {\n\t\t\tthis.log.debug('config ' + this.config);\n\n\t\t\tthis.landingZoneRepo = await LandingZoneRepoImpl.create(this);\n\t\t\tthis.powerRepo = await PowerRepository.create(this);\n\t\t\tthis.eegRepo = await EegRepositoryImpl.create(this);\n\t\t\tawait this.eegRepo.operating.setValue(this.config.optionEnergyManagementActive);\n\n\t\t\tthis.externalStateConnector = await ExternalStateConnector.create(this, this.config);\n\n\t\t\tthis.analyzerBonus = new AnalyzerBonus(this.powerRepo, this.landingZoneRepo, this.eegRepo);\n\t\t\tthis.analyzerLack = new AnalyzerLack(this.powerRepo, this.landingZoneRepo, this.eegRepo);\n\n\t\t\t// calculating average Values\n\t\t\t// TODO make interval configurable\n\t\t\tscheduleJob('*/20 * * * * *', () => {\n\t\t\t\tconsole.debug('calculating average Values');\n\t\t\t\tthis.powerRepo!.calculate();\n\t\t\t});\n\n\t\t\tscheduleJob('*/30 * * * * *', () => {\n\t\t\t\tconsole.debug('C H E C K I N G   F O R   B O N U S  /  L A C K');\n\t\t\t\tthis.analyzerBonus!.run();\n\t\t\t\tthis.analyzerLack!.run();\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// private async onReady(): Promise<void> {\n\t// \t// Initialize your adapter here\n\t//\n\t// \t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t// \t// this.config:\n\t// \tthis.log.info('config option1: ' + this.config.option1);\n\t// \tthis.log.info('config option2: ' + this.config.option2);\n\t//\n\t// \t/*\n\t// \tFor every state in the system there has to be also an object of type state\n\t// \tHere a simple template for a boolean variable named \"testVariable\"\n\t// \tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t// \t*/\n\t// \tawait this.setObjectNotExistsAsync('testVariable', {\n\t// \t\ttype: 'state',\n\t// \t\tcommon: {\n\t// \t\t\tname: 'testVariable',\n\t// \t\t\ttype: 'boolean',\n\t// \t\t\trole: 'indicator',\n\t// \t\t\tread: true,\n\t// \t\t\twrite: true,\n\t// \t\t},\n\t// \t\tnative: {},\n\t// \t});\n\t//\n\t// \t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t// \t// this.subscribeStates('testVariable');\n\t// \t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t// \t// this.subscribeStates('lights.*');\n\t// \t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t// \t// this.subscribeStates('*');\n\t//\n\t// \t/*\n\t// \t\tsetState examples\n\t// \t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t// \t*/\n\t// \t// the variable testVariable is set to true as command (ack=false)\n\t// \t// await this.setStateAsync('testVariable', true);\n\t//\n\t// \t// same thing, but the value is flagged \"ack\"\n\t// \t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t// \t// await this.setStateAsync('testVariable', { val: true, ack: true });\n\t//\n\t// \t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t// \t// await this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\n\t//\n\t// \t// examples for the checkPassword/checkGroup functions\n\t// \t// let result = await this.checkPasswordAsync('admin', 'iobroker');\n\t// \t// this.log.info('check user admin pw iobroker: ' + result);\n\t//\n\t// \t// result = await this.checkGroupAsync('admin', 'admin');\n\t// \t// this.log.info('check group user admin group admin: ' + result);\n\t// }\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\t//this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\n\t\t\tthis.externalStateConnector?.onSubscribedStateChanged(id, state.val);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SrcSmartRenewablesConsume(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new SrcSmartRenewablesConsume())();\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAEvB,2BAA4B;AAC5B,2BAA6B;AAC7B,4BAA8B;AAC9B,8BAAgC;AAChC,qCAA2D;AAC3D,4BAAiD;AACjD,sCAAuC;AAKvC,MAAM,kCAAkC,MAAM,QAAQ;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,IACP,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAKtC,QAAI;AACH,WAAK,IAAI,MAAM,YAAY,KAAK,MAAM;AAEtC,WAAK,kBAAkB,MAAM,mDAAoB,OAAO,IAAI;AAC5D,WAAK,YAAY,MAAM,wCAAgB,OAAO,IAAI;AAClD,WAAK,UAAU,MAAM,wCAAkB,OAAO,IAAI;AAClD,YAAM,KAAK,QAAQ,UAAU,SAAS,KAAK,OAAO,4BAA4B;AAE9E,WAAK,yBAAyB,MAAM,uDAAuB,OAAO,MAAM,KAAK,MAAM;AAEnF,WAAK,gBAAgB,IAAI,oCAAc,KAAK,WAAW,KAAK,iBAAiB,KAAK,OAAO;AACzF,WAAK,eAAe,IAAI,kCAAa,KAAK,WAAW,KAAK,iBAAiB,KAAK,OAAO;AAIvF,4CAAY,kBAAkB,MAAM;AACnC,gBAAQ,MAAM,4BAA4B;AAC1C,aAAK,UAAW,UAAU;AAAA,MAC3B,CAAC;AAED,4CAAY,kBAAkB,MAAM;AACnC,gBAAQ,MAAM,iDAAiD;AAC/D,aAAK,cAAe,IAAI;AACxB,aAAK,aAAc,IAAI;AAAA,MACxB,CAAC;AAAA,IACF,SAAS,OAAO;AACf,cAAQ,MAAM,KAAK;AACnB,YAAM;AAAA,IACP;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2DQ,SAAS,UAA4B;AAC5C,QAAI;AAOH,eAAS;AAAA,IACV,SAAS,GAAG;AACX,eAAS;AAAA,IACV;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqCQ,cAAc,IAAY,OAAgD;AAzLnF;AA0LE,QAAI,OAAO;AAIV,iBAAK,2BAAL,mBAA6B,yBAAyB,IAAI,MAAM;AAAA,IACjE,OAAO;AAEN,WAAK,IAAI,KAAK,SAAS,EAAE,UAAU;AAAA,IACpC;AAAA,EACD;AACD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,0BAA0B,OAAO;AAC/G,OAAO;AAEN,GAAC,MAAM,IAAI,0BAA0B,GAAG;AACzC;",
  "names": []
}
