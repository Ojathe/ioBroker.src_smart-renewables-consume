{
  "version": 3,
  "sources": ["../../src/devices/heat-pump.ts"],
  "sourcesContent": ["import { Device } from './device';\nimport { ExtXidNumber } from '../values/extXId';\n\nexport interface HeatPumpConfig {\n\tsensors: {\n\t\tactualTemp: ExtXidNumber,\n\t\ttargetTemp: ExtXidNumber\n\t};\n\tmeasurements: {\n\t\tload: ExtXidNumber,\n\t\tloadTotal: ExtXidNumber\n\t};\n}\n\nexport interface HeatPump extends Device {\n\tactualTemp: () => Promise<number>,\n\ttargetTemp: () => Promise<number>,\n\tload: () => Promise<number>,\n\toperating: () => Promise<boolean>,\n\tloadTotal: () => Promise<number>\n}\n\nexport class HeatPumpImpl implements HeatPump {\n\tactualTemp: () => Promise<number>;\n\tload: () => Promise<number>;\n\tloadTotal: () => Promise<number>;\n\ttargetTemp: () => Promise<number>;\n\n\tprivate constructor(private readonly config: HeatPumpConfig) {\n\t\tthis.actualTemp = () => this.config.sensors.actualTemp.getValue();\n\t\tthis.targetTemp = () => this.config.sensors.targetTemp.getValue();\n\t\tthis.load = () => this.config.measurements.load.getValue();\n\t\tthis.loadTotal = () => this.config.measurements.loadTotal.getValue();\n\t}\n\n\tstatic create = async (config: HeatPumpConfig): Promise<HeatPump> => {\n\t\tconst pump = new HeatPumpImpl(config);\n\n\t\treturn pump;\n\t};\n\n\toperating = async (): Promise<boolean> => {\n\t\treturn (await this.load()) > 15;\n\t};\n\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBO,MAAM,aAAiC;AAAA,EAMrC,YAA6B,QAAwB;AAAxB;AACpC,SAAK,aAAa,MAAM,KAAK,OAAO,QAAQ,WAAW,SAAS;AAChE,SAAK,aAAa,MAAM,KAAK,OAAO,QAAQ,WAAW,SAAS;AAChE,SAAK,OAAO,MAAM,KAAK,OAAO,aAAa,KAAK,SAAS;AACzD,SAAK,YAAY,MAAM,KAAK,OAAO,aAAa,UAAU,SAAS;AAAA,EACpE;AAAA,EAVA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EASA,OAAO,SAAS,OAAO,WAA8C;AACpE,UAAM,OAAO,IAAI,aAAa,MAAM;AAEpC,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,YAA8B;AACzC,WAAQ,MAAM,KAAK,KAAK,IAAK;AAAA,EAC9B;AAED;",
  "names": []
}
