{
  "version": 3,
  "sources": ["../../src/repositories/landing-zone-repository.ts"],
  "sourcesContent": ["import { XidBool, XidNumber } from '../values/xid';\nimport { AdapterInstance } from '@iobroker/adapter-core';\nimport { createObjectBool, createObjectNum } from '../util/create-objects-helper';\n\nexport const EXTERNAL_STATE_LANDINGZONE = {\n\tPV_GENERATION: 'ingoing.pv-generation',\n\tTOTAL_LOAD: 'ingoing.total-load',\n\tBAT_SOC: 'ingoing.bat-soc',\n\tSOLAR_RADIATION: 'ingoing.solar-radiation',\n\tIS_GRID_BUYING: 'ingoing.is-grid-buying',\n\tGRID_LOAD: 'ingoing.grid-load',\n\tBAT_LOAD: 'ingoing.bat-load',\n};\n\nexport interface LandingZoneRepository {\n\tpvGeneration: XidNumber,\n\ttotalLoad: XidNumber,\n\tgridLoad: XidNumber,\n\tbatLoad: XidNumber,\n\tbatterySoC: XidNumber,\n\tsolarRadiation: XidNumber,\n\tisGridBuying: XidBool,\n}\n\nexport class LandingZoneRepoImpl implements LandingZoneRepository {\n\tprivate constructor() {\n\t}\n\n\tprivate _gridLoad: XidNumber | undefined;\n\n\tget gridLoad(): XidNumber {\n\t\treturn this._gridLoad!;\n\t}\n\n\tprivate _batLoad: XidNumber | undefined;\n\n\tget batLoad(): XidNumber {\n\t\treturn this._batLoad!;\n\t}\n\n\tprivate _batterySoC: XidNumber | undefined;\n\n\tget batterySoC(): XidNumber {\n\t\treturn this._batterySoC!;\n\t}\n\n\tprivate _solarRadiation: XidNumber | undefined;\n\n\tget solarRadiation(): XidNumber {\n\t\treturn this._solarRadiation!;\n\t}\n\n\tprivate _isGridBuying: XidBool | undefined;\n\n\tget isGridBuying(): XidBool {\n\t\treturn this._isGridBuying!;\n\t}\n\n\tprivate _totalLoad: XidNumber | undefined;\n\n\tpublic get totalLoad(): XidNumber {\n\t\treturn this._totalLoad!;\n\t}\n\n\tprivate _pvGeneration: XidNumber | undefined;\n\n\tpublic get pvGeneration(): XidNumber {\n\t\treturn this._pvGeneration!;\n\t}\n\n\tstatic async create(adapter: AdapterInstance): Promise<LandingZoneRepository> {\n\n\t\tconst repo = new LandingZoneRepoImpl();\n\t\tawait repo.createObjects(adapter);\n\n\t\trepo._pvGeneration = await XidNumber.asReadable(adapter, EXTERNAL_STATE_LANDINGZONE.PV_GENERATION);\n\t\trepo._totalLoad = await XidNumber.asReadable(adapter, EXTERNAL_STATE_LANDINGZONE.TOTAL_LOAD);\n\t\trepo._gridLoad = await XidNumber.asReadable(adapter, EXTERNAL_STATE_LANDINGZONE.GRID_LOAD);\n\t\trepo._batLoad = await XidNumber.asReadable(adapter, EXTERNAL_STATE_LANDINGZONE.BAT_LOAD);\n\t\trepo._batterySoC = await XidNumber.asReadable(adapter, EXTERNAL_STATE_LANDINGZONE.BAT_SOC);\n\t\trepo._solarRadiation = await XidNumber.asReadable(adapter, EXTERNAL_STATE_LANDINGZONE.SOLAR_RADIATION);\n\t\trepo._isGridBuying = await XidBool.asReadable(adapter, EXTERNAL_STATE_LANDINGZONE.IS_GRID_BUYING);\n\n\t\treturn repo;\n\t}\n\n\tcreateObjects = async (adapter: AdapterInstance): Promise<void> => {\n\t\tawait createObjectNum(adapter, EXTERNAL_STATE_LANDINGZONE.PV_GENERATION, 0, {\n\t\t\tdesc: 'The amount of power currently generated',\n\t\t\tunit: 'kWh',\n\t\t});\n\n\t\tawait createObjectNum(adapter, EXTERNAL_STATE_LANDINGZONE.TOTAL_LOAD, 0, {\n\t\t\tdesc: 'The overall amount of currently consumend power',\n\t\t\tunit: 'kWh',\n\t\t});\n\n\t\tawait createObjectNum(adapter, EXTERNAL_STATE_LANDINGZONE.BAT_SOC, 0, {\n\t\t\tdesc: 'The battery stand of charge',\n\t\t\tunit: '%',\n\t\t});\n\n\t\tawait createObjectNum(adapter, EXTERNAL_STATE_LANDINGZONE.SOLAR_RADIATION, 0, {\n\t\t\tdesc: 'The Solar Radiation',\n\t\t\tunit: 'w\\\\m\u00B2',\n\t\t});\n\n\t\tawait createObjectNum(adapter, EXTERNAL_STATE_LANDINGZONE.GRID_LOAD, 0, {\n\t\t\tdesc: 'The grids load',\n\t\t\tunit: 'kWh',\n\t\t});\n\n\t\tawait createObjectNum(adapter, EXTERNAL_STATE_LANDINGZONE.BAT_LOAD, 0, {\n\t\t\tdesc: 'The battery load',\n\t\t\tunit: 'kWh',\n\t\t});\n\n\t\tawait createObjectBool(adapter, EXTERNAL_STATE_LANDINGZONE.IS_GRID_BUYING, false, {\n\t\t\tdesc: 'True, if the System is buying energy from grid (external)',\n\t\t});\n\t};\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAmC;AAEnC,mCAAkD;AAE3C,MAAM,6BAA6B;AAAA,EACzC,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,UAAU;AACX;AAYO,MAAM,oBAAqD;AAAA,EACzD,cAAc;AAAA,EACtB;AAAA,EAEQ;AAAA,EAER,IAAI,WAAsB;AACzB,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAI,UAAqB;AACxB,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAI,aAAwB;AAC3B,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAI,iBAA4B;AAC/B,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAI,eAAwB;AAC3B,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAW,YAAuB;AACjC,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ;AAAA,EAER,IAAW,eAA0B;AACpC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,aAAa,OAAO,SAA0D;AAE7E,UAAM,OAAO,IAAI,oBAAoB;AACrC,UAAM,KAAK,cAAc,OAAO;AAEhC,SAAK,gBAAgB,MAAM,qBAAU,WAAW,SAAS,2BAA2B,aAAa;AACjG,SAAK,aAAa,MAAM,qBAAU,WAAW,SAAS,2BAA2B,UAAU;AAC3F,SAAK,YAAY,MAAM,qBAAU,WAAW,SAAS,2BAA2B,SAAS;AACzF,SAAK,WAAW,MAAM,qBAAU,WAAW,SAAS,2BAA2B,QAAQ;AACvF,SAAK,cAAc,MAAM,qBAAU,WAAW,SAAS,2BAA2B,OAAO;AACzF,SAAK,kBAAkB,MAAM,qBAAU,WAAW,SAAS,2BAA2B,eAAe;AACrG,SAAK,gBAAgB,MAAM,mBAAQ,WAAW,SAAS,2BAA2B,cAAc;AAEhG,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB,OAAO,YAA4C;AAClE,cAAM,8CAAgB,SAAS,2BAA2B,eAAe,GAAG;AAAA,MAC3E,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC;AAED,cAAM,8CAAgB,SAAS,2BAA2B,YAAY,GAAG;AAAA,MACxE,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC;AAED,cAAM,8CAAgB,SAAS,2BAA2B,SAAS,GAAG;AAAA,MACrE,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC;AAED,cAAM,8CAAgB,SAAS,2BAA2B,iBAAiB,GAAG;AAAA,MAC7E,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC;AAED,cAAM,8CAAgB,SAAS,2BAA2B,WAAW,GAAG;AAAA,MACvE,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC;AAED,cAAM,8CAAgB,SAAS,2BAA2B,UAAU,GAAG;AAAA,MACtE,MAAM;AAAA,MACN,MAAM;AAAA,IACP,CAAC;AAED,cAAM,+CAAiB,SAAS,2BAA2B,gBAAgB,OAAO;AAAA,MACjF,MAAM;AAAA,IACP,CAAC;AAAA,EACF;AACD;",
  "names": []
}
