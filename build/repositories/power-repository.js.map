{
  "version": 3,
  "sources": ["../../src/repositories/power-repository.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\nimport { AverageValue } from '../values/average-value';\nimport { getStateAsBoolean, getStateAsNumber } from '../util/state-util';\nimport { round } from '../util/math';\nimport { EXTERNAL_STATE_LANDINGZONE } from './landing-zone-repository';\n\nexport interface AverageValueGroupMembers {\n\tsolarRadiation: AverageValue,\n\tpowerPv: AverageValue,\n\tpowerBalance: AverageValue,\n\tpowerGrid: AverageValue,\n\tpowerBattery: AverageValue\n}\n\nexport type AverageValueGroupMemberValues = {\n\t[key in keyof AverageValueGroupMembers]: () => Promise<number>\n}\n\nexport class PowerRepository {\n\tprivate solarRadiation: AverageValue | undefined;\n\tprivate powerBalance: AverageValue | undefined;\n\tprivate powerBattery: AverageValue | undefined;\n\tprivate _powerPv: AverageValue | undefined;\n\tprivate _powerGrid: AverageValue | undefined;\n\n\tprivate constructor(private adapter: AdapterInstance) {\n\t}\n\n\tpublic get members(): AverageValueGroupMembers {\n\n\t\tif (!this.solarRadiation || !this._powerPv || !this.powerBalance || !this._powerGrid || !this.powerBattery) {\n\t\t\tthrow new Error('make sure to build the value group before use its values');\n\t\t}\n\n\t\treturn {\n\t\t\tsolarRadiation: this.solarRadiation,\n\t\t\tpowerPv: this._powerPv,\n\t\t\tpowerBalance: this.powerBalance,\n\t\t\tpowerGrid: this._powerGrid,\n\t\t\tpowerBattery: this.powerBattery,\n\t\t};\n\t}\n\n\tpublic get avg(): AverageValueGroupMemberValues {\n\t\treturn {\n\t\t\tsolarRadiation: this.members.solarRadiation.avg.getValue,\n\t\t\tpowerPv: this.members.powerPv.avg.getValue,\n\t\t\tpowerBalance: this.members.powerBalance.avg.getValue,\n\t\t\tpowerGrid: this.members.powerGrid.avg.getValue,\n\t\t\tpowerBattery: this.members.powerBattery.avg.getValue,\n\t\t};\n\t}\n\n\tpublic get avg5(): AverageValueGroupMemberValues {\n\t\treturn {\n\t\t\tsolarRadiation: this.members.solarRadiation.avg5.getValue,\n\t\t\tpowerPv: this.members.powerPv.avg5.getValue,\n\t\t\tpowerBalance: this.members.powerBalance.avg5.getValue,\n\t\t\tpowerGrid: this.members.powerGrid.avg5.getValue,\n\t\t\tpowerBattery: this.members.powerBattery.avg5.getValue,\n\t\t};\n\t}\n\n\tpublic get current(): AverageValueGroupMemberValues {\n\t\treturn {\n\t\t\tsolarRadiation: this.members.solarRadiation.current.getValue,\n\t\t\tpowerPv: this.members.powerPv.current.getValue,\n\t\t\tpowerBalance: this.members.powerBalance.current.getValue,\n\t\t\tpowerGrid: this.members.powerGrid.current.getValue,\n\t\t\tpowerBattery: this.members.powerBattery.current.getValue,\n\t\t};\n\t}\n\n\tstatic async build(adapter: AdapterInstance): Promise<PowerRepository> {\n\t\tconst val = new PowerRepository(adapter);\n\n\t\tval.solarRadiation = await AverageValue.build(adapter, 'solar-radiation', {\n\t\t\tdesc: 'Average solar radiation',\n\t\t\txidSource: EXTERNAL_STATE_LANDINGZONE.SOLAR_RADIATION,\n\t\t\tunit: 'wm\u00B2',\n\t\t});\n\n\t\tval._powerPv = await AverageValue.build(adapter, 'power-pv', {\n\t\t\tdesc: 'PV generation',\n\t\t\txidSource: EXTERNAL_STATE_LANDINGZONE.PV_GENERATION,\n\t\t\tunit: 'kW',\n\t\t});\n\n\t\tval.powerBattery = await AverageValue.build(adapter, 'bat-load', {\n\t\t\tdesc: 'The Battery load (-) consuming / (+) charging',\n\t\t\txidSource: EXTERNAL_STATE_LANDINGZONE.BAT_LOAD,\n\t\t\tunit: 'kW',\n\t\t});\n\n\t\tval.powerBalance = await AverageValue.build(adapter, 'power-dif', {\n\t\t\tdesc: 'difference of energy over generation (+) and loss consumption(-)',\n\t\t\tasync mutation(_val: number) {\n\t\t\t\tconst load = await getStateAsNumber(adapter, EXTERNAL_STATE_LANDINGZONE.TOTAL_LOAD);\n\t\t\t\tconst pvPower = await getStateAsNumber(adapter, EXTERNAL_STATE_LANDINGZONE.PV_GENERATION);\n\n\t\t\t\tif (!load || !pvPower) {\n\t\t\t\t\treturn Number.NEGATIVE_INFINITY;\n\t\t\t\t}\n\n\t\t\t\tconsole.debug(\n\t\t\t\t\t`Calculating PowerDif Load:${load} kWh, PV-Gen: ${pvPower} kWh => Dif of ${pvPower - load}`,\n\t\t\t\t);\n\n\t\t\t\treturn round(pvPower - load);\n\t\t\t},\n\t\t});\n\n\t\tval._powerGrid = await AverageValue.build(adapter, 'power-grid', {\n\t\t\tdesc: 'amount of generation(+) or buying(-) of energy',\n\t\t\txidSource: EXTERNAL_STATE_LANDINGZONE.GRID_LOAD,\n\t\t\tasync mutation(val: number) {\n\t\t\t\tconst isGridBuying = (await getStateAsBoolean(adapter, EXTERNAL_STATE_LANDINGZONE.IS_GRID_BUYING)) ?? true;\n\t\t\t\treturn round(val * (isGridBuying ? -1 : 1));\n\t\t\t},\n\t\t});\n\n\t\t// TODO BatteryPower (lg-ess-home.0.user.essinfo.common.BATT.dc_power)\n\n\t\treturn val;\n\t}\n\n\tpublic async calculate(): Promise<void> {\n\t\tfor (const valueKey in this.members) {\n\t\t\tawait this.members[valueKey as keyof AverageValueGroupMembers].calculate();\n\t\t}\n\t}\n\n}\n\n\n"],
  "mappings": "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",
  "names": ["val"]
}
